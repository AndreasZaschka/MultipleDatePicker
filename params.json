{
  "name": "Multipledatepicker",
  "tagline": "",
  "body": "# What is MultipleDatePicker ?\r\nMultipleDatePicker is an Angular directive to show a simple calendar allowing user to select multiple dates, a callback is called, you can specify some off days or already selected days.\r\n\r\n# Get it\r\n## NPM style\r\n```\r\nnpm install multiple-date-picker --save\r\n```\r\n\r\n## Bower style\r\n```\r\nbower install multiple-date-picker --save\r\n```\r\n\r\n## Hipster style\r\n```\r\ngit clone https://github.com/arca-computing/MultipleDatePicker.git\r\n```\r\n\r\n# Time to use it\r\nInclude at least css file\r\n\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"multiple-date-picker.css\"/>\r\n<script type=\"text/javascript\" src=\"multipleDatePicker.min.js\"></script>\r\n```\r\n    \r\nIf don't use something that gets dependencies for you, don't forget to include dependencies manually : Angular and MomentJS.\r\n\r\n# Add it to your angular app\r\n```javascript\r\nvar app = angular.module('myApp', ['multipleDatePicker']);\r\n```\r\n\r\n# Add it in your html\r\n```html\r\n<div>\r\n    <multiple-date-picker></multiple-date-picker>\r\n</div>\r\n```\r\n\r\n\r\nIt will use the max width of it's parent, so If you want to reduce it specify a width (or use Bootstrap/Foundation).\r\n\r\n```html\r\n<div style=\"width:50%\">\r\n    <multiple-date-picker></multiple-date-picker>\r\n</div>\r\n```\r\n    \r\n# Options\r\n##ngModel\r\nMajor change since previous version, we now use a ngModel attribute. Bind your array of moment dates, watch it to get notified when a date is selected/unselected.\r\n\r\n```javascript\r\n$scope.myArrayOfDates = [moment().date(4), moment().date(5), moment().date(8)];\r\n    \r\n$scope.$watch('myArrayOfDates', function(newValue, oldValue){\r\n    if(newValue){\r\n        console.log('my array changed, new size : ' + newValue.length);\r\n    }\r\n});\r\n```\r\n  \r\n```html\r\n<multiple-date-picker ngModel=\"myArrayOfDates\"></multiple-date-picker>\r\n```\r\n\r\n##month\r\nYou can change current month when you want.\r\n\r\n```javascript\r\n$scope.myMonth = moment().add(3, 'MONTH');\r\n```\r\n\r\n```html\r\n<multiple-date-picker month=\"myMonth\" />\r\n```\r\n\r\n##First day of week\r\nBy default Monday will be the first day of week, but you can set calendar to use Sunday as first day of week\r\n\r\n```html\r\n<multiple-date-picker sunday-first-day=\"true\" />\r\n```\r\n    \r\n\r\n##Show previous/next month days\r\nYou can show previous and next months days with this option. You can combine all 3 options to fit your needs.\r\n\r\n- showDaysOfSurroundingMonths : if true empty boxes will be filled, default is false\r\n- cssDaysOfSurroundingMonths : applied css class to empty boxes. You can chain like 'myclass1 myclass2 myclass3', default is 'picker-empty'\r\n- fireEventsForDaysOfSurroundingMonths : fire events on empty boxes, default is false\r\n\r\n```html\r\n<multiple-date-picker\r\n    show-days-of-surrounding-months=\"true\"\r\n    fire-events-for-days-of-surrounding-months=\"true\"\r\n    css-days-of-surrounding-months=\"'picker-other-month-custom'\"\r\n    highlight-days=\"highlightDays\"\r\n/>\r\n```\r\n\r\nWe use custom (and pretty ugly I know) css to customize previous/next months dates and highlight days\r\n\r\n```css\r\n.picker-day.picker-other-month-custom{\r\n    background-color: #d17357;\r\n    color: #fff;\r\n}\r\n\r\n.picker-day.picker-other-month-custom:hover{\r\n    cursor: pointer;\r\n    background-color: #ae5d4a;\r\n    color: #fff;\r\n}\r\n\r\n.picker-day.picker-other-month-custom.picker-selected{\r\n    background-color: #9c5244;\r\n}\r\n\r\n.picker-day.holiday{\r\n    background-color: #00ffa2;\r\n    color: #fff;\r\n}\r\n\r\n.picker-day.holiday.picker-selected{\r\n    background-color: #00ae69;\r\n    color: #fff;\r\n}\r\n\r\n.picker-day.holiday.picker-off{\r\n    background-color: #00a267;\r\n    color: #fff;\r\n    cursor: default;\r\n}\r\n\r\n.picker-day.holiday:not(.picker-off):hover{\r\n    background-color: #00e795;\r\n    color: #fff;\r\n}\r\n\r\n\r\n.picker-day.birthday:not(.picker-selected){\r\n    background-color: #ded100;\r\n    color: #000;\r\n}\r\n```\r\n    \r\n##dayClick/dayHover\r\nYou can use this callback to check something and prevent the event to happen (click will select/unselect date, hover will trigger hover event on the date).\r\n\r\n```javascript\r\n$scope.checkSelection = function(event, date) {\r\n    if(somethingWrongWithThisDate(date)){\r\n        event.preventDefault();\r\n        console.log('my click was prevented, want am I gonna do with my life ?');\r\n    }\r\n}\r\n```\r\n    \r\n```html\r\n<multiple-date-picker day-click=\"checkSelection\"></multiple-date-picker>\r\n```\r\n    \r\n    \r\n##all-days-off\r\nDisable all dates in the calendar, default is false\r\n\r\n```html\r\n<multiple-date-picker all-days-off=\"true\"/>\r\n```\r\n\r\n##Highlight-days\r\nThis is an array containing dates you want to highlight, I can be a day-off like a bank day, holiday, your birthday, anything you want.\r\n\r\n```javascript\r\n{\r\n    date: Timestamp/String/Moment, //anything usable with moment\r\n    css: String //class applied, can be \"class1\" or \"class1 class2 class3 ...\"\r\n    selectable: true/false,\r\n    title: String //will be use in title attribute (show when cursor is hover)\r\n}\r\n```\r\n\r\nThe live demo represent the 2nd of month as holiday (not clickable), 14h a day off (not clickable) and the 25th is my birthday (not really, and clickable).\r\n\r\n```javascript\r\n$scope.highlightDays = [\r\n    {date: moment().date(2).valueOf(), css: 'holiday', selectable: false,title: 'Holiday time !'},\r\n    {date: moment().date(14).valueOf(), css: 'off', selectable: false,title: 'We don\\'t work today'},\r\n    {date: moment().date(25).valueOf(), css: 'birthday', selectable: true,title: 'I\\'m thir... i\\'m 28, seriously, I mean ...'}\r\n];\r\n```\r\n\r\n```html\r\n<multiple-date-picker highlight-days=\"highlightDays\"/>\r\n```\r\n\r\nAnd here the css used for this demo\r\n\r\n```css\r\n/*apply colors if not selected, if selected I want the default selected css*/\r\n.picker-day.holiday:not(.picker-selected){\r\n    background-color: #00ffa2;\r\n    color: #fff;\r\n}\r\n\r\n/*if my holiday isn't clickable (it's the case in the demo)*/\r\n.picker-day.holiday.picker-off{\r\n    background-color: #00a267;\r\n    color: #fff;\r\n    cursor: default;\r\n}\r\n\r\n/*my birthday, is clickable*/\r\n.picker-day.birthday:not(.picker-selected){\r\n    background-color: #ded100;\r\n    color: #000;\r\n}\r\n```\r\n    \r\n## Week-days-off\r\nThose are days for every week that are not selectable. Sunday = 0, Monday = 1 ... Saturday = 6.\r\n\r\n```html\r\n<multiple-date-picker week-days-off=\"[0, 3]\"/>\r\n```\r\n    \r\n##disable-days-before\r\nIf filled will disable all days before this one (not included)\r\n\r\n```javascript \r\n$scope.today = moment();\r\n```\r\n\r\n```html\r\n<multiple-date-picker disable-days-before=\"today\"/>\r\n```\r\n    \r\n##disable-days-after\r\nIf filled will disable all days after this one (not included)\r\n\r\n```javascript\r\n$scope.today = moment();\r\n```\r\n\r\n```html\r\n<multiple-date-picker disable-days-after=\"today\"/>\r\n```\r\n    \r\n##month-changed\r\nThe callback will be called everytime you change month (previous or next month). \r\n*Be aware that newMonth and oldMonth given to the callback is first day of month at midnight.*\r\n\r\nThis exemple shows how to pass a scope function that will prompt an alert with infos.\r\n\r\n```javascript\r\n$scope.logMonthChanged = function(newMonth, oldMonth){\r\n    alert('new month : ' + newMonth.format('YYYY-M-DD') + ' || old month : ' + oldMonth.format('YYYY-M-DD'));\r\n};\r\n```\r\n\r\n```html\r\n<multiple-date-picker month-changed=\"logMonthChanged\"/>\r\n```\r\n    \r\n##disallow-back-past-months\r\nIf true the back button to go previous month will be disabled if you are on today's month, so you can't go in past month\r\n\r\n```html\r\n<multiple-date-picker disallow-back-past-months=\"true\"/>\r\n```\r\n    \r\n##disallow-go-futur-months\r\nIf true the back button to go next month will be disabled if you are on today's month, so you can't go the futur\r\n\r\n```html\r\n<multiple-date-picker disallow-go-futur-months=\"true\"/>\r\n```\r\n    \r\n##Emit reset\r\nYou can reset calendar using the factory multipleDatePickerBroadcast\r\n\r\nclick me to reset keeping daysSelected (clicReset)\r\nclick me to reset without keeping daysSelected (clicResetFull)\r\n\r\n```javascript\r\n$scope.clicReset = function(){\r\n    multipleDatePickerBroadcast.resetOrder('myId');\r\n};\r\n\r\n$scope.clicResetFull = function(){\r\n    $scope.selectedDays2 = []; //trigger a reset today but now is deprecated\r\n    multipleDatePickerBroadcast.resetOrder('myId');\r\n};\r\n```\r\n\r\n```html\r\n<multiple-date-picker calendar-id=\"'myId'\" days-selected=\"selectedDays2\"/>\r\n```\r\n    \r\n    \r\n#Examples\r\n##One day selection only\r\nYou want user to be able to select only one day, that's not a problem. Try to select multiple days, you'll not be able. Yeah we call it MAGIC !\r\n\r\n```javascript\r\n$scope.selectedDays3 = [];\r\n\r\n$scope.oneDaySelectionOnly = function (event, date) {\r\n    event.preventDefault();\r\n    $scope.selectedDays3 = [];\r\n    if(!date.selected){ //selected not affected yet, so if day is selected, selected property will be false\r\n        $scope.selectedDays3.push(date);\r\n    }\r\n    multipleDatePickerBroadcast.resetOrder('myId2');\r\n};\r\n```\r\n\r\n```html\r\n<multiple-date-picker calendar-id=\"'myId2'\" days-selected=\"selectedDays3\" day-click=\"oneDaySelectionOnly\"/>\r\n```\r\n    \r\n##Let's get serious\r\nYou can (of course) use all options at the same time.\r\n  \r\n```html\r\n<multiple-date-picker\r\n    days-off=\"oneDayOff\"\r\n    days-selected=\"selectedDays\"\r\n    week-days-off=\"[0]\"\r\n    day-click=\"logInfos\"/>\r\n```\r\n              \r\n#Dependencies\r\nThe calendar uses 2 dependencies you must add to your project : angular of course and moment.js.\r\n\r\nBecause we use moment.js, you can load a language file and change the calendar language (days and months names), like this :\r\n\r\n```javascript\r\nmoment.lang('fr');\r\nvar app = angular.module...\r\n```\r\n\r\nWeek days order, week days names and month + year format cannot be changed with an option.\r\n\r\n#What's next ?\r\nWe created this directive to have a simple calendar with multi-dates selection. We will keep it simple but any improvement is welcome.\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}